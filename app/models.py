from sqlalchemy import Column, Integer, String, Boolean, Float, Text, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from .database import Base

class Reviewer(Base):
    __tablename__ = 'reviewer'
    reviewer_id = Column(Integer, primary_key=True, index=True)
    reviewer_name = Column(String(255))
    skin_type_trouble_prone = Column(Boolean)
    skin_type_oily = Column(Boolean)
    skin_type_sensitive = Column(Boolean)
    skin_type_dry = Column(Boolean)
    skin_type_mildly_dry = Column(Boolean)
    skin_type_combination = Column(Boolean)
    skin_type_normal = Column(Boolean)
    personal_color_spring_warm = Column(Boolean)
    personal_color_cool = Column(Boolean)
    personal_color_autumn_warm = Column(Boolean)
    personal_color_winter_cool = Column(Boolean)
    personal_color_summer_cool = Column(Boolean)
    personal_color_warm = Column(Boolean)
    skin_concern_keratin = Column(Boolean)
    skin_concern_pores = Column(Boolean)
    skin_concern_blackheads = Column(Boolean)
    skin_concern_excess_sebum = Column(Boolean)
    skin_concern_whitening = Column(Boolean)
    skin_concern_redness = Column(Boolean)
    skin_concern_wrinkles = Column(Boolean)
    skin_concern_trouble = Column(Boolean)
    skin_concern_dark_circles = Column(Boolean)
    skin_concern_elasticity = Column(Boolean)
    skin_concern_atopy = Column(Boolean)
    skin_concern_spots = Column(Boolean)

    # reviews = relationship("Review", back_populates="reviewer")

class Product(Base):
    __tablename__ = 'product'
    product_id = Column(Integer, primary_key=True, index=True)
    product_name = Column(String(255))
    product_category = Column(String(255))
    brand_name = Column(String(255))
    original_price = Column(Integer)
    final_price = Column(Integer)
    number_of_reviews = Column(Integer)
    review_rating = Column(Float)
    review_5_star_ratio = Column(Float)
    review_4_star_ratio = Column(Float)
    review_3_star_ratio = Column(Float)
    review_2_star_ratio = Column(Float)
    review_1_star_ratio = Column(Float)
    skin_type_dry = Column(Integer)
    skin_type_combination = Column(Integer)
    skin_type_oily = Column(Integer)
    skin_concern_moisturizing = Column(Integer)
    skin_concern_soothing = Column(Integer)
    skin_concern_wrinkles_whitening = Column(Integer)
    cleansing_power_very_satisfied = Column(Integer)
    cleansing_power_average = Column(Integer)
    cleansing_power_somewhat_disappointed = Column(Integer)
    spreadability_very_satisfied = Column(Integer)
    spreadability_average = Column(Integer)
    spreadability_somewhat_disappointed = Column(Integer)
    irritation_level_not_irritating = Column(Integer)
    irritation_level_average = Column(Integer)
    irritation_level_irritating = Column(Integer)

    # reviews = relationship("Review", back_populates="product")

class Review(Base):
    __tablename__ = 'review'
    review_id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey('product.product_id'))
    reviewer_id = Column(Integer, ForeignKey('reviewer.reviewer_id'))
    product_name = Column(String(255))
    reviewer_name = Column(String(255))
    rating = Column(Integer)
    used_over_one_month = Column(Boolean)
    repurchase_intention = Column(Boolean)
    skin_type_review = Column(String(255))
    skin_concern_review = Column(String(255))
    irritation_level_review = Column(String(255))
    cleansing_power_review = Column(String(255))
    spreadability_review = Column(String(255))
    review_content = Column(Text)
    review_date = Column(DateTime)

    # reviewer = relationship("Reviewer", back_populates="reviews")
    # product = relationship("Product", back_populates="reviews")